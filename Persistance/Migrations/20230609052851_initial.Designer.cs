// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistance.RootContext;

#nullable disable

namespace Persistance.Migrations
{
    [DbContext(typeof(EntityContext))]
    [Migration("20230609052851_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Auth.AuthFriend", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("FriendState")
                        .HasColumnType("integer")
                        .HasColumnName("friend_state");

                    b.Property<long>("ReceivedFriendId")
                        .HasColumnType("bigint")
                        .HasColumnName("receiver_friend_id");

                    b.Property<long>("RequestedFriendId")
                        .HasColumnType("bigint")
                        .HasColumnName("requested_friend_id");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ReceivedFriendId");

                    b.HasIndex("RequestedFriendId");

                    b.ToTable("auth_friends", "auth");
                });

            modelBuilder.Entity("Domain.Entities.Auth.AuthRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("keyword");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.ToTable("auth_roles", "auth");
                });

            modelBuilder.Entity("Domain.Entities.Auth.AuthUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EmailHash")
                        .HasColumnType("text")
                        .HasColumnName("email_hash");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<long>("FriendsCount")
                        .HasColumnType("bigint")
                        .HasColumnName("friends_count");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("LastOtpHash")
                        .HasColumnType("text")
                        .HasColumnName("last_otp");

                    b.Property<int>("LocationVisibleFor")
                        .HasColumnType("integer")
                        .HasColumnName("location_visible_for");

                    b.Property<string>("PhoneHash")
                        .HasColumnType("text")
                        .HasColumnName("phone_hash");

                    b.Property<string>("Salt")
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserStatus")
                        .HasColumnType("integer")
                        .HasColumnName("user_status");

                    b.Property<long?>("UsernameId")
                        .HasColumnType("bigint")
                        .HasColumnName("username_id");

                    b.HasKey("Id");

                    b.HasIndex("EmailHash")
                        .IsUnique()
                        .HasFilter("email_hash IS NOT NULL");

                    b.HasIndex("PhoneHash")
                        .IsUnique()
                        .HasFilter("phone_hash IS NOT NULL");

                    b.HasIndex("UsernameId");

                    b.ToTable("auth_users", "auth");
                });

            modelBuilder.Entity("Domain.Entities.Auth.AuthUsername", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("auth_usernames", "auth");
                });

            modelBuilder.Entity("Domain.Entities.Location.LocationPhoto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extension");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint")
                        .HasColumnName("location_id");

                    b.Property<double>("Size")
                        .HasColumnType("double precision")
                        .HasColumnName("size");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("location_photo", "locations");
                });

            modelBuilder.Entity("Domain.Entities.Location.UserLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("auth_user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<int>("LocationStatus")
                        .HasColumnType("integer")
                        .HasColumnName("location_status");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AuthUserId");

                    b.ToTable("user_location", "locations");
                });

            modelBuilder.Entity("Domain.Entities.Auth.AuthFriend", b =>
                {
                    b.HasOne("Domain.Entities.Auth.AuthUser", "ReceivedFrientId")
                        .WithMany()
                        .HasForeignKey("ReceivedFriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Auth.AuthUser", "RequestedFriend")
                        .WithMany()
                        .HasForeignKey("RequestedFriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceivedFrientId");

                    b.Navigation("RequestedFriend");
                });

            modelBuilder.Entity("Domain.Entities.Auth.AuthUser", b =>
                {
                    b.HasOne("Domain.Entities.Auth.AuthUsername", "Username")
                        .WithMany()
                        .HasForeignKey("UsernameId");

                    b.Navigation("Username");
                });

            modelBuilder.Entity("Domain.Entities.Location.LocationPhoto", b =>
                {
                    b.HasOne("Domain.Entities.Location.UserLocation", "UserLocation")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLocation");
                });

            modelBuilder.Entity("Domain.Entities.Location.UserLocation", b =>
                {
                    b.HasOne("Domain.Entities.Auth.AuthUser", "AuthUser")
                        .WithMany()
                        .HasForeignKey("AuthUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthUser");
                });
#pragma warning restore 612, 618
        }
    }
}
